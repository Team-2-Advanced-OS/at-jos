Exercise 10:

i = 0
esp            0xf010ffdc	0xf010ffdc
ebp            0xf010fff8	0xf010fff8

i =1

esp            0xf010ffbc	0xf010ffbc-----------> 20
ebp            0xf010ffd8	0xf010ffd8---------------> 20

i=2
esp            0xf010ff9c	0xf010ff9c
ebp            0xf010ffb8	0xf010ffb8

i=3
esp            0xf010ff7c	0xf010ff7c
ebp            0xf010ff98	0xf010ff98

i=4
esp            0xf010ff5c	0xf010ff5c
ebp            0xf010ff78	0xf010ff78

i =5

esp            0xf010ff3c	0xf010ff3c
ebp            0xf010ff58	0xf010ff58


Exercise 11/12:

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
	
 uint32_t* ebp;
struct Eipdebuginfo info;
ebp = (uint32_t*) read_ebp();
cprintf("Stack backtrace:\n");
while (ebp){
uint32_t offset_eip =0;
uint32_t eip = *(ebp+1);
cprintf ("ebp %08x ",ebp);
cprintf ("eip %08x ",*(ebp+1));
cprintf("args:");
cprintf("%08x ",*(ebp+2)); 
cprintf("%08x ",*(ebp+3)) ;
cprintf("%08x ",*(ebp+4)) ;
cprintf("%08x ",*(ebp+5)) ;
cprintf("%08x\n",*(ebp+6)) ;
debuginfo_eip(eip, &info);
offset_eip = eip-info.eip_fn_addr;
cprintf("\t %s:%d: %.*s+%d\n",info.eip_file,info.eip_line,info.eip_fn_namelen,info.eip_fn_name,offset_eip);
ebp = (uint32_t*) *ebp;
}




output:
Stack backtrace:
ebp f010ff18 eip f010007b args:00000000 00000000 00000000 00000000 f0100989
	      kern/init.c:18: test_backtrace+59
ebp f010ff38 eip f0100068 args:00000000 00000001 f010ff78 00000000 f0100989
	      kern/init.c:16: test_backtrace+40
ebp f010ff58 eip f0100068 args:00000001 00000002 f010ff98 00000000 f0100989
	      kern/init.c:16: test_backtrace+40
ebp f010ff78 eip f0100068 args:00000002 00000003 f010ffb8 00000000 f0100989
	      kern/init.c:16: test_backtrace+40
ebp f010ff98 eip f0100068 args:00000003 00000004 00000000 00000000 00000000
	      kern/init.c:16: test_backtrace+40
ebp f010ffb8 eip f0100068 args:00000004 00000005 00000000 00010094 00010094
	      kern/init.c:16: test_backtrace+40
ebp f010ffd8 eip f01000d4 args:00000005 00001aac 00000644 00000000 00000000
	      kern/init.c:39: i386_init+64
ebp f010fff8 eip f010003e args:00111021 00000000 00000000 00000000 00000000
	      {standard input}:0: <unknown>+0




Stack backtrace:
ebp f010ff68 eip f0100955 args:00000001 f010ff80 00000000 f010ffc8 f0112540
	      kern/monitor.c:149: monitor+256
ebp f010ffd8 eip f01000e1 args:00000000 00001aac 00000644 00000000 00000000
	      kern/init.c:43: i386_init+77
ebp f010fff8 eip f010003e args:00111021 00000000 00000000 00000000 00000000
	      {standard input}:0: <unknown>+0

Flow:
Exercise 11
line 37: 
// Debug information about a particular instruction pointer
	struct Eipdebuginfo {
		const char *eip_file;		// Source code filename for EIP
		int eip_line;			// Source code linenumber for EIP

		const char *eip_fn_name;	// Name of function containing EIP
						//  - Note: not null terminated!
		int eip_fn_namelen;		// Length of function name
		uintptr_t eip_fn_addr;		// Address of start of function
		int eip_fn_narg;		// Number of function arguments
	};

.*s ---->  printf("%.*s\n", str_len, str);
asterisk (*) to pass the width specifier/precision to printf()

















